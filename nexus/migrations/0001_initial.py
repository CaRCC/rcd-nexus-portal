# Generated by Django 4.2.3 on 2023-10-04 18:52

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import nexus.utils.time


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CapabilitiesQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="A short and meaningful text identifier for this question.",
                        max_length=255,
                    ),
                ),
                (
                    "index",
                    models.PositiveSmallIntegerField(
                        help_text="The index of this question in its topic."
                    ),
                ),
                (
                    "attrs",
                    models.JSONField(
                        default=dict,
                        help_text="A JSON object containing additional queryable attributes for this question.",
                    ),
                ),
                (
                    "valid_after",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="This question will only be included in assessments created after this time.",
                    ),
                ),
                (
                    "valid_before",
                    models.DateTimeField(
                        db_index=True,
                        help_text="This question will only be included in assessments created before this time.",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CapabilitiesTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.CharField(max_length=50)),
                (
                    "index",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Position of this topic in its facing's topics.",
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["facing", "index", "slug"],
            },
        ),
        migrations.CreateModel(
            name="Facing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.CharField(max_length=50, unique=True)),
                (
                    "index",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Position of this facing in the list of facings.",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "RCD facing",
                "ordering": ["index", "slug"],
            },
        ),
        migrations.CreateModel(
            name="Institution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ipeds_sector",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Public 4-yr"),
                            (2, "Private 4-yr"),
                            (3, "For Profit 4-yr"),
                            (4, "Public 2-yr"),
                            (5, "Private 2-yr"),
                            (6, "For Profit 2-yr"),
                        ],
                        null=True,
                        verbose_name="Sector",
                    ),
                ),
                (
                    "ipeds_level",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "4 or more"), (2, "2 to 4")],
                        null=True,
                        verbose_name="Level",
                    ),
                ),
                (
                    "ipeds_control",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Public"),
                            (2, "Private non-profit"),
                            (3, "Private for-profit"),
                        ],
                        null=True,
                        verbose_name="Public/Private",
                    ),
                ),
                (
                    "ipeds_hbcu",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "HBCU"), (2, "Not an HBCU")],
                        null=True,
                        verbose_name="Historically Black College or University",
                    ),
                ),
                (
                    "ipeds_tcu",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "TCU"), (2, "Not a TCU")],
                        null=True,
                        verbose_name="Tribal College or University",
                    ),
                ),
                (
                    "ipeds_urbanization",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (11, "City: Large"),
                            (12, "City: Midsize"),
                            (13, "City: Small"),
                            (21, "Suburb: Large"),
                            (22, "Suburb: Midsize"),
                            (23, "Suburb: Small"),
                            (31, "Town: Fringe"),
                            (32, "Town: Distant"),
                            (33, "Town: Remote"),
                            (41, "Rural: Fringe"),
                            (42, "Rural: Distant"),
                            (43, "Rural: Remote"),
                            (-3, "{Not available}"),
                        ],
                        null=True,
                        verbose_name="Urbanization",
                    ),
                ),
                (
                    "ipeds_land_grant",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Land Grant Institution"),
                            (2, "Not a Land Grant Institution"),
                        ],
                        null=True,
                        verbose_name="Land Grant Institution",
                    ),
                ),
                (
                    "carnegie_classification",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (15, "R1"),
                            (16, "R2"),
                            (17, "R3"),
                            (18, "M1"),
                            (19, "M2"),
                            (20, "M3"),
                            (21, "Bacc: Arts and Sci"),
                            (22, "Bacc: Diverse"),
                            (23, "Mixed Bacc/Assoc"),
                            (25, "4yr: Med Schools & Centers"),
                            (26, "4yr: Other Health Prof. Schools"),
                            (27, "4yr: Research Institutions"),
                            (28, "4yr: Engineering & Technology Schools"),
                            (29, "4yr: Business & Management Schools"),
                            (30, "4yr: Arts, Music & Design Schools"),
                            (31, "4yr: Law Schools"),
                            (32, "4yr: Other Special Focus Institutions"),
                            (33, "Tribal Colleges"),
                        ],
                        null=True,
                        verbose_name="Carnegie Classification",
                    ),
                ),
                (
                    "ipeds_size",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Under 1,000"),
                            (2, "1,000 - 4,999"),
                            (3, "5,000 - 9,999"),
                            (4, "10,000 - 19,999"),
                            (5, "20,000 and above"),
                        ],
                        null=True,
                        verbose_name="Size Range (# of students)",
                    ),
                ),
                (
                    "ipeds_region",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Service schools"),
                            (1, "New England"),
                            (2, "Mid East"),
                            (3, "Great Lakes"),
                            (4, "Plains"),
                            (5, "Southeast"),
                            (6, "Southwest"),
                            (7, "Rocky Mountains"),
                            (8, "Far West"),
                            (9, "Other U.S. jurisdictions"),
                            (100, "Canada"),
                        ],
                        null=True,
                        verbose_name="Region",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("country", models.CharField(max_length=255)),
                (
                    "state_or_province",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="State/Province",
                    ),
                ),
                ("internet_domain", models.CharField(max_length=255, unique=True)),
                (
                    "undergrad_pop",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Undergraduate Population"
                    ),
                ),
                (
                    "grad_pop",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Graduate Population"
                    ),
                ),
                (
                    "student_pop",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Student Population"
                    ),
                ),
                (
                    "research_expenditure",
                    models.PositiveBigIntegerField(
                        blank=True, null=True, verbose_name="Research Expenditures"
                    ),
                ),
                (
                    "list_as_contributor",
                    models.BooleanField(
                        default=True,
                        help_text="Whether a representative of this institution has agreed to be listed as a contributor to the RCD Nexus.",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RCDProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mission",
                    models.CharField(
                        choices=[
                            (
                                "rsrchess",
                                "<b>Research Essential</b>: Research is the primary or exclusive mission,             and teaching does not significantly factor into faculty and institutional success.",
                            ),
                            (
                                "rsrchfav",
                                "<b>Research Favored</b>: Research and teaching are the primary missions,             but research is what really drives faculty and institutional success.",
                            ),
                            (
                                "balanced",
                                "<b>Balanced</b>: Research and teaching are both primary missions,             and they are equally important for faculty and institutional success.",
                            ),
                            (
                                "teachfav",
                                "<b>Teaching Favored</b>: Teaching is the primary mission,                                                 but faculty research is rewarded.",
                            ),
                            (
                                "teachess",
                                "<b>Teaching Essential</b>: Teaching is the primary mission,             and faculty research does not factor heavily in faculty and institutional success.",
                            ),
                        ],
                        default=None,
                        help_text="Select the option that best describes your institution's mission.",
                        max_length=64,
                        null=True,
                        verbose_name="Institutional Mission",
                    ),
                ),
                (
                    "structure",
                    models.CharField(
                        choices=[
                            ("standalone", "Primarily within a central RCD/HPC group"),
                            (
                                "embedded",
                                "Embedded within a single department or school",
                            ),
                            (
                                "decentralized",
                                "Decentralized collaboration among several departments, schools, etc.",
                            ),
                            (
                                "none",
                                "No organized RCD support program currently exists",
                            ),
                        ],
                        help_text="Select the option that best describes how your institution's RCD services and staff are organized.",
                        max_length=32,
                        null=True,
                        verbose_name="RCD organizational model",
                    ),
                ),
                (
                    "org_chart",
                    models.CharField(
                        choices=[
                            ("infotech", "Information technology (e.g., CIO)"),
                            ("research", "Research (e.g., VPR)"),
                            (
                                "academic",
                                "Academic leadership (e.g., Provost or a Dean)",
                            ),
                            ("institute", "Academic/Research Institute or Center"),
                            ("other", "Other"),
                        ],
                        help_text="Select the option that best describes where within the institution your RCD program ultimately reports.              <br/>If 'Other', please explain in the comment section below.",
                        max_length=32,
                        null=True,
                        verbose_name="Reporting structure",
                    ),
                ),
                (
                    "institution_subunit",
                    models.CharField(
                        blank=True,
                        help_text="<em>(Optional)</em> If the scope of this profile is RCD support at the entire institution             (the common case, and preferred use of the Capabilities Model), you can <b>leave this blank</b>.<br/>             If you are completing an assessment for just one part of your institution,             enter the name of the institutional subunit (e.g. 'College of Engineering', 'School of Medicine', 'Center for ...').",
                        max_length=255,
                        null=True,
                        verbose_name="Organizational scope",
                    ),
                ),
                ("year", models.PositiveIntegerField(default=2023)),
                (
                    "profile_reason",
                    models.CharField(
                        choices=[
                            (
                                "rcdcmassess",
                                "To create an RCD Capabilities Model assessment",
                            ),
                            (
                                "simple",
                                "Just creating a simple profile for now (I'm exploring)",
                            ),
                            ("other", "Other"),
                        ],
                        default="rcdcmassess",
                        help_text='If you are creating this profile other than to complete an RCD Capabilities Model assessment (the default),             what is your reason for creating this profile (i.e., how do you intend to use it)?                 <br/>If "Other", please explain in the comment section below.',
                        max_length=32,
                        verbose_name="Reason for creating profile",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        help_text="Any additional information about RCD support at your institution.",
                        null=True,
                    ),
                ),
                (
                    "archived",
                    models.BooleanField(
                        default=False,
                        help_text="Archived profiles are hidden from view, but can be restored.",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="profiles_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="profiles",
                        to="nexus.institution",
                    ),
                ),
            ],
            options={
                "verbose_name": "RCD profile",
            },
            managers=[
                ("objects_archive", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="RCDProfileMemberRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="membership_requests",
                        to="nexus.rcdprofile",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RCDProfileMemberInvite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("viewer", "Viewer"),
                            ("contributor", "Contributor"),
                            ("manager", "Manager"),
                            ("submitter", "Submitter"),
                        ],
                        default="viewer",
                        max_length=32,
                    ),
                ),
                (
                    "expire_time",
                    models.DateTimeField(default=nexus.utils.time.next_week),
                ),
                ("token", models.CharField(max_length=64, unique=True)),
                (
                    "invited_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invitations",
                        to="nexus.rcdprofile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RCDProfileMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("viewer", "Viewer"),
                            ("contributor", "Contributor"),
                            ("manager", "Manager"),
                            ("submitter", "Submitter"),
                        ],
                        default="viewer",
                        max_length=32,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="nexus.rcdprofile",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rcd_profile_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "profile member",
            },
        ),
        migrations.AddField(
            model_name="rcdprofile",
            name="users",
            field=models.ManyToManyField(
                related_name="rcd_profiles",
                through="nexus.RCDProfileMember",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="NewInstitutionRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("country", models.CharField(max_length=255)),
                (
                    "state_or_province",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="State/Province",
                    ),
                ),
                ("internet_domain", models.CharField(max_length=255, unique=True)),
                ("comment", models.TextField(blank=True, null=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InstitutionAffiliation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("affiliate", "Affiliate"), ("manager", "Manager")],
                        default="affiliate",
                        max_length=64,
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_affiliations",
                        to="nexus.institution",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affiliations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="institution",
            name="users",
            field=models.ManyToManyField(
                related_name="institutions",
                through="nexus.InstitutionAffiliation",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="IdentityProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        help_text="This should match an `entityID` listed in https://cilogon.org/include/idplist.xml",
                        max_length=1000,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=1000, null=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "institution",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="cilogon_idps",
                        to="nexus.institution",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FederatedIdentity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("identifier", models.CharField(max_length=1000, unique=True)),
                ("data", models.JSONField(blank=True)),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="nexus.identityprovider",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Federated identities",
            },
        ),
        migrations.CreateModel(
            name="FacingContent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("af", "Afrikaans"),
                            ("ar", "Arabic"),
                            ("ar-dz", "Algerian Arabic"),
                            ("ast", "Asturian"),
                            ("az", "Azerbaijani"),
                            ("bg", "Bulgarian"),
                            ("be", "Belarusian"),
                            ("bn", "Bengali"),
                            ("br", "Breton"),
                            ("bs", "Bosnian"),
                            ("ca", "Catalan"),
                            ("ckb", "Central Kurdish (Sorani)"),
                            ("cs", "Czech"),
                            ("cy", "Welsh"),
                            ("da", "Danish"),
                            ("de", "German"),
                            ("dsb", "Lower Sorbian"),
                            ("el", "Greek"),
                            ("en", "English"),
                            ("en-au", "Australian English"),
                            ("en-gb", "British English"),
                            ("eo", "Esperanto"),
                            ("es", "Spanish"),
                            ("es-ar", "Argentinian Spanish"),
                            ("es-co", "Colombian Spanish"),
                            ("es-mx", "Mexican Spanish"),
                            ("es-ni", "Nicaraguan Spanish"),
                            ("es-ve", "Venezuelan Spanish"),
                            ("et", "Estonian"),
                            ("eu", "Basque"),
                            ("fa", "Persian"),
                            ("fi", "Finnish"),
                            ("fr", "French"),
                            ("fy", "Frisian"),
                            ("ga", "Irish"),
                            ("gd", "Scottish Gaelic"),
                            ("gl", "Galician"),
                            ("he", "Hebrew"),
                            ("hi", "Hindi"),
                            ("hr", "Croatian"),
                            ("hsb", "Upper Sorbian"),
                            ("hu", "Hungarian"),
                            ("hy", "Armenian"),
                            ("ia", "Interlingua"),
                            ("id", "Indonesian"),
                            ("ig", "Igbo"),
                            ("io", "Ido"),
                            ("is", "Icelandic"),
                            ("it", "Italian"),
                            ("ja", "Japanese"),
                            ("ka", "Georgian"),
                            ("kab", "Kabyle"),
                            ("kk", "Kazakh"),
                            ("km", "Khmer"),
                            ("kn", "Kannada"),
                            ("ko", "Korean"),
                            ("ky", "Kyrgyz"),
                            ("lb", "Luxembourgish"),
                            ("lt", "Lithuanian"),
                            ("lv", "Latvian"),
                            ("mk", "Macedonian"),
                            ("ml", "Malayalam"),
                            ("mn", "Mongolian"),
                            ("mr", "Marathi"),
                            ("ms", "Malay"),
                            ("my", "Burmese"),
                            ("nb", "Norwegian Bokmål"),
                            ("ne", "Nepali"),
                            ("nl", "Dutch"),
                            ("nn", "Norwegian Nynorsk"),
                            ("os", "Ossetic"),
                            ("pa", "Punjabi"),
                            ("pl", "Polish"),
                            ("pt", "Portuguese"),
                            ("pt-br", "Brazilian Portuguese"),
                            ("ro", "Romanian"),
                            ("ru", "Russian"),
                            ("sk", "Slovak"),
                            ("sl", "Slovenian"),
                            ("sq", "Albanian"),
                            ("sr", "Serbian"),
                            ("sr-latn", "Serbian Latin"),
                            ("sv", "Swedish"),
                            ("sw", "Swahili"),
                            ("ta", "Tamil"),
                            ("te", "Telugu"),
                            ("tg", "Tajik"),
                            ("th", "Thai"),
                            ("tk", "Turkmen"),
                            ("tr", "Turkish"),
                            ("tt", "Tatar"),
                            ("udm", "Udmurt"),
                            ("uk", "Ukrainian"),
                            ("ur", "Urdu"),
                            ("uz", "Uzbek"),
                            ("vi", "Vietnamese"),
                            ("zh-hans", "Simplified Chinese"),
                            ("zh-hant", "Traditional Chinese"),
                        ],
                        default="en",
                        max_length=8,
                    ),
                ),
                ("display_name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "facing",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contents",
                        to="nexus.facing",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CapabilitiesTopicContent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("af", "Afrikaans"),
                            ("ar", "Arabic"),
                            ("ar-dz", "Algerian Arabic"),
                            ("ast", "Asturian"),
                            ("az", "Azerbaijani"),
                            ("bg", "Bulgarian"),
                            ("be", "Belarusian"),
                            ("bn", "Bengali"),
                            ("br", "Breton"),
                            ("bs", "Bosnian"),
                            ("ca", "Catalan"),
                            ("ckb", "Central Kurdish (Sorani)"),
                            ("cs", "Czech"),
                            ("cy", "Welsh"),
                            ("da", "Danish"),
                            ("de", "German"),
                            ("dsb", "Lower Sorbian"),
                            ("el", "Greek"),
                            ("en", "English"),
                            ("en-au", "Australian English"),
                            ("en-gb", "British English"),
                            ("eo", "Esperanto"),
                            ("es", "Spanish"),
                            ("es-ar", "Argentinian Spanish"),
                            ("es-co", "Colombian Spanish"),
                            ("es-mx", "Mexican Spanish"),
                            ("es-ni", "Nicaraguan Spanish"),
                            ("es-ve", "Venezuelan Spanish"),
                            ("et", "Estonian"),
                            ("eu", "Basque"),
                            ("fa", "Persian"),
                            ("fi", "Finnish"),
                            ("fr", "French"),
                            ("fy", "Frisian"),
                            ("ga", "Irish"),
                            ("gd", "Scottish Gaelic"),
                            ("gl", "Galician"),
                            ("he", "Hebrew"),
                            ("hi", "Hindi"),
                            ("hr", "Croatian"),
                            ("hsb", "Upper Sorbian"),
                            ("hu", "Hungarian"),
                            ("hy", "Armenian"),
                            ("ia", "Interlingua"),
                            ("id", "Indonesian"),
                            ("ig", "Igbo"),
                            ("io", "Ido"),
                            ("is", "Icelandic"),
                            ("it", "Italian"),
                            ("ja", "Japanese"),
                            ("ka", "Georgian"),
                            ("kab", "Kabyle"),
                            ("kk", "Kazakh"),
                            ("km", "Khmer"),
                            ("kn", "Kannada"),
                            ("ko", "Korean"),
                            ("ky", "Kyrgyz"),
                            ("lb", "Luxembourgish"),
                            ("lt", "Lithuanian"),
                            ("lv", "Latvian"),
                            ("mk", "Macedonian"),
                            ("ml", "Malayalam"),
                            ("mn", "Mongolian"),
                            ("mr", "Marathi"),
                            ("ms", "Malay"),
                            ("my", "Burmese"),
                            ("nb", "Norwegian Bokmål"),
                            ("ne", "Nepali"),
                            ("nl", "Dutch"),
                            ("nn", "Norwegian Nynorsk"),
                            ("os", "Ossetic"),
                            ("pa", "Punjabi"),
                            ("pl", "Polish"),
                            ("pt", "Portuguese"),
                            ("pt-br", "Brazilian Portuguese"),
                            ("ro", "Romanian"),
                            ("ru", "Russian"),
                            ("sk", "Slovak"),
                            ("sl", "Slovenian"),
                            ("sq", "Albanian"),
                            ("sr", "Serbian"),
                            ("sr-latn", "Serbian Latin"),
                            ("sv", "Swedish"),
                            ("sw", "Swahili"),
                            ("ta", "Tamil"),
                            ("te", "Telugu"),
                            ("tg", "Tajik"),
                            ("th", "Thai"),
                            ("tk", "Turkmen"),
                            ("tr", "Turkish"),
                            ("tt", "Tatar"),
                            ("udm", "Udmurt"),
                            ("uk", "Ukrainian"),
                            ("ur", "Urdu"),
                            ("uz", "Uzbek"),
                            ("vi", "Vietnamese"),
                            ("zh-hans", "Simplified Chinese"),
                            ("zh-hant", "Traditional Chinese"),
                        ],
                        default="en",
                        max_length=8,
                    ),
                ),
                ("display_name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contents",
                        to="nexus.capabilitiestopic",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="capabilitiestopic",
            name="facing",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="capmodel_topics",
                to="nexus.facing",
            ),
        ),
        migrations.CreateModel(
            name="CapabilitiesQuestionContent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("af", "Afrikaans"),
                            ("ar", "Arabic"),
                            ("ar-dz", "Algerian Arabic"),
                            ("ast", "Asturian"),
                            ("az", "Azerbaijani"),
                            ("bg", "Bulgarian"),
                            ("be", "Belarusian"),
                            ("bn", "Bengali"),
                            ("br", "Breton"),
                            ("bs", "Bosnian"),
                            ("ca", "Catalan"),
                            ("ckb", "Central Kurdish (Sorani)"),
                            ("cs", "Czech"),
                            ("cy", "Welsh"),
                            ("da", "Danish"),
                            ("de", "German"),
                            ("dsb", "Lower Sorbian"),
                            ("el", "Greek"),
                            ("en", "English"),
                            ("en-au", "Australian English"),
                            ("en-gb", "British English"),
                            ("eo", "Esperanto"),
                            ("es", "Spanish"),
                            ("es-ar", "Argentinian Spanish"),
                            ("es-co", "Colombian Spanish"),
                            ("es-mx", "Mexican Spanish"),
                            ("es-ni", "Nicaraguan Spanish"),
                            ("es-ve", "Venezuelan Spanish"),
                            ("et", "Estonian"),
                            ("eu", "Basque"),
                            ("fa", "Persian"),
                            ("fi", "Finnish"),
                            ("fr", "French"),
                            ("fy", "Frisian"),
                            ("ga", "Irish"),
                            ("gd", "Scottish Gaelic"),
                            ("gl", "Galician"),
                            ("he", "Hebrew"),
                            ("hi", "Hindi"),
                            ("hr", "Croatian"),
                            ("hsb", "Upper Sorbian"),
                            ("hu", "Hungarian"),
                            ("hy", "Armenian"),
                            ("ia", "Interlingua"),
                            ("id", "Indonesian"),
                            ("ig", "Igbo"),
                            ("io", "Ido"),
                            ("is", "Icelandic"),
                            ("it", "Italian"),
                            ("ja", "Japanese"),
                            ("ka", "Georgian"),
                            ("kab", "Kabyle"),
                            ("kk", "Kazakh"),
                            ("km", "Khmer"),
                            ("kn", "Kannada"),
                            ("ko", "Korean"),
                            ("ky", "Kyrgyz"),
                            ("lb", "Luxembourgish"),
                            ("lt", "Lithuanian"),
                            ("lv", "Latvian"),
                            ("mk", "Macedonian"),
                            ("ml", "Malayalam"),
                            ("mn", "Mongolian"),
                            ("mr", "Marathi"),
                            ("ms", "Malay"),
                            ("my", "Burmese"),
                            ("nb", "Norwegian Bokmål"),
                            ("ne", "Nepali"),
                            ("nl", "Dutch"),
                            ("nn", "Norwegian Nynorsk"),
                            ("os", "Ossetic"),
                            ("pa", "Punjabi"),
                            ("pl", "Polish"),
                            ("pt", "Portuguese"),
                            ("pt-br", "Brazilian Portuguese"),
                            ("ro", "Romanian"),
                            ("ru", "Russian"),
                            ("sk", "Slovak"),
                            ("sl", "Slovenian"),
                            ("sq", "Albanian"),
                            ("sr", "Serbian"),
                            ("sr-latn", "Serbian Latin"),
                            ("sv", "Swedish"),
                            ("sw", "Swahili"),
                            ("ta", "Tamil"),
                            ("te", "Telugu"),
                            ("tg", "Tajik"),
                            ("th", "Thai"),
                            ("tk", "Turkmen"),
                            ("tr", "Turkish"),
                            ("tt", "Tatar"),
                            ("udm", "Udmurt"),
                            ("uk", "Ukrainian"),
                            ("ur", "Urdu"),
                            ("uz", "Uzbek"),
                            ("vi", "Vietnamese"),
                            ("zh-hans", "Simplified Chinese"),
                            ("zh-hant", "Traditional Chinese"),
                        ],
                        default="en",
                        max_length=8,
                    ),
                ),
                ("text", models.TextField()),
                ("help_text", models.TextField(blank=True, null=True)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contents",
                        to="nexus.capabilitiesquestion",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="capabilitiesquestion",
            name="topic",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="nexus.capabilitiestopic",
            ),
        ),
        migrations.CreateModel(
            name="CapabilitiesAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "update_time",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the assessment was most recently updated.",
                    ),
                ),
                (
                    "review_status",
                    models.CharField(
                        choices=[
                            ("not_submitted", "Not yet submitted"),
                            ("pending", "Review pending"),
                            ("approved", "Approved"),
                            ("denied", "Denied"),
                        ],
                        default="not_submitted",
                        max_length=64,
                    ),
                ),
                (
                    "review_time",
                    models.DateTimeField(
                        editable=False,
                        help_text="When the assessment status was last updated by an administrator",
                        null=True,
                    ),
                ),
                (
                    "review_note",
                    models.TextField(
                        blank=True,
                        help_text="An explanation of why the assessment was denied, etc.",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capabilities_assessment",
                        to="nexus.rcdprofile",
                    ),
                ),
                (
                    "review_user",
                    models.ForeignKey(
                        editable=False,
                        help_text="The Nexus data steward that last reviewed this assessment.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "update_user",
                    models.ForeignKey(
                        editable=False,
                        help_text="The user that most recently updated the assessment.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CapabilitiesAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "score_deployment",
                    models.FloatField(
                        blank=True,
                        choices=[
                            (0.0, "1 - No availability or support"),
                            (0.25, "2 - Tracking potential use"),
                            (0.5, "3 - Planning, piloting, and initial deployment"),
                            (
                                0.75,
                                "4 - Available/supported for parts of the institution",
                            ),
                            (1.0, "5 - Available/supported institution-wide"),
                            (None, "---"),
                        ],
                        default=None,
                        help_text="The level and breadth of availability across the institution for this service or resource. This should take into account equitable access (including cost).",
                        null=True,
                        verbose_name="Availability across institution",
                    ),
                ),
                (
                    "score_supportlevel",
                    models.FloatField(
                        blank=True,
                        choices=[
                            (0.0, "1 - No existing service/support or awareness"),
                            (0.25, "2 - Very limited support and/or at risk"),
                            (0.5, "3 - Minimal resources & commitment"),
                            (0.75, "4 - Basic sustained service/support & awareness"),
                            (1.0, "5 - Strong support, awareness, & commitment"),
                            (None, "---"),
                        ],
                        default=None,
                        help_text="Represents the robustness, resilience, and sustainability of support for this service or resource.",
                        null=True,
                        verbose_name="Service operating level",
                    ),
                ),
                (
                    "score_collaboration",
                    models.FloatField(
                        blank=True,
                        choices=[
                            (0.0, "1 - No engagement with community collaboration"),
                            (0.25, "2 - Exploring a community collaboration"),
                            (0.5, "3 - Engaging a community collaboration"),
                            (0.75, "4 - Supporting a community collaboration"),
                            (1.0, "5 - Leading a community collaboration"),
                            (None, "---"),
                        ],
                        default=None,
                        help_text="Represents the degree of engagement and collaboration, ranging from participation in community forums to regional projects to national collaborations. This should generally involve active engagement with other institutions.",
                        null=True,
                        verbose_name="Community engagement and collaboration",
                    ),
                ),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=None,
                        help_text='The priority, or importance of this question to your institution.            This can be used, e.g., to mark items you want to address in your strategic planning.                <br>Range is [1 to 99]  (1 is your top priority).                <br>This does not impact the calculated coverage.                <br>Clear or set to "0" if this is not a priority.',
                        null=True,
                        verbose_name="Local Priority",
                    ),
                ),
                (
                    "work_notes",
                    models.TextField(
                        blank=True,
                        help_text="Private work notes for this question. Contents will not be included in the community datasets.",
                        null=True,
                    ),
                ),
                (
                    "is_modified",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        help_text="Whether this answer has ever been modified from its original state (i.e. inherited value).",
                    ),
                ),
                (
                    "not_applicable",
                    models.BooleanField(
                        default=False,
                        help_text="Check ONLY this if this question is not at all applicable to your institution.",
                        verbose_name="Question not applicable",
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="nexus.capabilitiesassessment",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="answers",
                        to="nexus.capabilitiesquestion",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AffiliationRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("token", models.CharField(max_length=64, unique=True)),
                ("expires", models.DateTimeField()),
                (
                    "institution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="affiliation_requests",
                        to="nexus.institution",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="rcdprofilememberrequest",
            constraint=models.UniqueConstraint(
                fields=("profile", "requested_by"),
                name="nexus_rcdprofilememberrequest_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="rcdprofilemember",
            constraint=models.UniqueConstraint(
                fields=("profile", "user"), name="unique_profile_member"
            ),
        ),
        migrations.AddConstraint(
            model_name="institutionaffiliation",
            constraint=models.UniqueConstraint(
                fields=("user", "institution"), name="unique_institution_affiliation"
            ),
        ),
        migrations.AddConstraint(
            model_name="institution",
            constraint=models.UniqueConstraint(
                fields=("name", "country", "state_or_province"),
                name="unique_institution",
            ),
        ),
        migrations.AddConstraint(
            model_name="facingcontent",
            constraint=models.UniqueConstraint(
                fields=("facing", "language"), name="nexus_facingcontent_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="capabilitiestopiccontent",
            constraint=models.UniqueConstraint(
                fields=("topic", "language"),
                name="nexus_capabilitiestopiccontent_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="capabilitiestopic",
            constraint=models.UniqueConstraint(
                fields=("facing", "slug"), name="unique_topic"
            ),
        ),
        migrations.AddIndex(
            model_name="capabilitiesquestioncontent",
            index=models.Index(
                fields=["question", "language"], name="nexus_capab_questio_43efba_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="capabilitiesquestioncontent",
            constraint=models.UniqueConstraint(
                fields=("question", "language"),
                name="nexus_capabilitiesquestioncontent_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="capabilitiesquestion",
            constraint=models.UniqueConstraint(
                fields=("topic", "slug"), name="unique_question"
            ),
        ),
    ]
